package v1

// This file contains a collection of methods that can be used from go-restful to
// generate Swagger API documentation for its models. Please read this PR for more
// information on the implementation: https://github.com/emicklei/go-restful/pull/215
//
// TODOs are ignored from the parser (e.g. TODO(andronat):... || TODO:...) if and only if
// they are on one line! For multiple line or blocks that you want to ignore use ---.
// Any context after a --- is ignored.
//
// Those methods can be generated by using hack/update-swagger-docs.sh

// AUTO-GENERATED FUNCTIONS START HERE
var map_AWSProviderSpec = map[string]string{
	"":                 "AWSProviderSpec contains the required information to create a user policy in AWS.",
	"statementEntries": "StatementEntries contains a list of policy statements that should be associated with this credentials access key.",
}

func (AWSProviderSpec) SwaggerDoc() map[string]string {
	return map_AWSProviderSpec
}

var map_AWSProviderStatus = map[string]string{
	"":       "AWSProviderStatus containes the status of the credentials request in AWS.",
	"user":   "User is the name of the User created in AWS for these credentials.",
	"policy": "Policy is the name of the policy attached to the user in AWS.",
}

func (AWSProviderStatus) SwaggerDoc() map[string]string {
	return map_AWSProviderStatus
}

var map_StatementEntry = map[string]string{
	"":                "StatementEntry models an AWS policy statement entry.",
	"effect":          "Effect indicates if this policy statement is to Allow or Deny.",
	"action":          "Action describes the particular AWS service actions that should be allowed or denied. (i.e. ec2:StartInstances, iam:ChangePassword)",
	"resource":        "Resource specifies the object(s) this statement should apply to. (or \"*\" for all)",
	"policyCondition": "PolicyCondition specifies under which condition StatementEntry will apply",
}

func (StatementEntry) SwaggerDoc() map[string]string {
	return map_StatementEntry
}

var map_AzureProviderSpec = map[string]string{
	"":             "AzureProviderSpec contains the required information to create RBAC role bindings for Azure.",
	"roleBindings": "RoleBindings contains a list of roles that should be associated with the minted credential.",
}

func (AzureProviderSpec) SwaggerDoc() map[string]string {
	return map_AzureProviderSpec
}

var map_AzureProviderStatus = map[string]string{
	"":                          "AzureProviderStatus contains the status of the credentials request in Azure.",
	"name":                      "ServicePrincipalName is the name of the service principal created in Azure for these credentials.",
	"appID":                     "AppID is the application id of the service principal created in Azure for these credentials.",
	"secretLastResourceVersion": "SecretLastResourceVersion is the resource version of the secret resource that was last synced. Used to determine if the object has changed and requires a sync.",
}

func (AzureProviderStatus) SwaggerDoc() map[string]string {
	return map_AzureProviderStatus
}

var map_RoleBinding = map[string]string{
	"":     "RoleBinding models part of the Azure RBAC Role Binding",
	"role": "Role defines a set of permissions that should be associated with the minted credential.",
}

func (RoleBinding) SwaggerDoc() map[string]string {
	return map_RoleBinding
}

var map_CredentialsRequest = map[string]string{
	"": "CredentialsRequest is the Schema for the credentialsrequests API",
}

func (CredentialsRequest) SwaggerDoc() map[string]string {
	return map_CredentialsRequest
}

var map_CredentialsRequestCondition = map[string]string{
	"":                   "CredentialsRequestCondition contains details for any of the conditions on a CredentialsRequest object",
	"type":               "Type is the specific type of the condition",
	"status":             "Status is the status of the condition",
	"lastProbeTime":      "LastProbeTime is the last time we probed the condition",
	"lastTransitionTime": "LastTransitionTime is the last time the condition transitioned from one status to another.",
	"reason":             "Reason is a unique, one-word, CamelCase reason for the condition's last transition",
	"message":            "Message is a human-readable message indicating details about the last transition",
}

func (CredentialsRequestCondition) SwaggerDoc() map[string]string {
	return map_CredentialsRequestCondition
}

var map_CredentialsRequestList = map[string]string{
	"": "CredentialsRequestList contains a list of CredentialsRequest",
}

func (CredentialsRequestList) SwaggerDoc() map[string]string {
	return map_CredentialsRequestList
}

var map_CredentialsRequestSpec = map[string]string{
	"":             "CredentialsRequestSpec defines the desired state of CredentialsRequest",
	"secretRef":    "SecretRef points to the secret where the credentials should be stored once generated.",
	"providerSpec": "ProviderSpec contains the cloud provider specific credentials specification.",
}

func (CredentialsRequestSpec) SwaggerDoc() map[string]string {
	return map_CredentialsRequestSpec
}

var map_CredentialsRequestStatus = map[string]string{
	"":                   "CredentialsRequestStatus defines the observed state of CredentialsRequest",
	"provisioned":        "Provisioned is true once the credentials have been initially provisioned.",
	"lastSyncTimestamp":  "LastSyncTimestamp is the time that the credentials were last synced.",
	"lastSyncGeneration": "LastSyncGeneration is the generation of the credentials request resource that was last synced. Used to determine if the object has changed and requires a sync.",
	"providerStatus":     "ProviderStatus contains cloud provider specific status.",
	"conditions":         "Conditions includes detailed status for the CredentialsRequest",
}

func (CredentialsRequestStatus) SwaggerDoc() map[string]string {
	return map_CredentialsRequestStatus
}

var map_GCPProviderSpec = map[string]string{
	"":                 "GCPProviderSpec contains the required information to create a service account with policy bindings in GCP.",
	"predefinedRoles":  "PredefinedRoles is the list of GCP pre-defined roles that the CredentialsRequest requires.",
	"skipServiceCheck": "SkipServiceCheck can be set to true to skip the check whether the requested roles have the necessary services enabled",
}

func (GCPProviderSpec) SwaggerDoc() map[string]string {
	return map_GCPProviderSpec
}

var map_GCPProviderStatus = map[string]string{
	"":                 "GCPProviderStatus contains the status of the GCP credentials request.",
	"serviceAccountID": "ServiceAccountID is the ID of the service account created in GCP for the requested credentials.",
}

func (GCPProviderStatus) SwaggerDoc() map[string]string {
	return map_GCPProviderStatus
}

var map_OpenStackProviderSpec = map[string]string{
	"": "OpenStackProviderSpec the specification of the credentials request in OpenStack.",
}

func (OpenStackProviderSpec) SwaggerDoc() map[string]string {
	return map_OpenStackProviderSpec
}

var map_OpenStackProviderStatus = map[string]string{
	"": "OpenStackProviderStatus contains the status of the credentials request in OpenStack.",
}

func (OpenStackProviderStatus) SwaggerDoc() map[string]string {
	return map_OpenStackProviderStatus
}

var map_OvirtProviderSpec = map[string]string{
	"": "OvirtProviderSpec the specification of the credentials request in Ovirt.",
}

func (OvirtProviderSpec) SwaggerDoc() map[string]string {
	return map_OvirtProviderSpec
}

var map_OvirtProviderStatus = map[string]string{
	"": "OvirtProviderStatus contains the status of the credentials request in Ovirt.",
}

func (OvirtProviderStatus) SwaggerDoc() map[string]string {
	return map_OvirtProviderStatus
}

var map_VSpherePermission = map[string]string{
	"":           "VSpherePermission captures the details of the privileges being requested for the list of entities.",
	"privileges": "Privileges is the list of access being requested.",
}

func (VSpherePermission) SwaggerDoc() map[string]string {
	return map_VSpherePermission
}

var map_VSphereProviderSpec = map[string]string{
	"":            "VSphereProviderSpec contains the required information to create RBAC role bindings for VSphere.",
	"permissions": "Permissions contains a list of groups of privileges that are being requested.",
}

func (VSphereProviderSpec) SwaggerDoc() map[string]string {
	return map_VSphereProviderSpec
}

var map_VSphereProviderStatus = map[string]string{
	"":                          "VSphereProviderStatus contains the status of the credentials request in VSphere.",
	"secretLastResourceVersion": "SecretLastResourceVersion is the resource version of the secret resource that was last synced. Used to determine if the object has changed and requires a sync.",
}

func (VSphereProviderStatus) SwaggerDoc() map[string]string {
	return map_VSphereProviderStatus
}

// AUTO-GENERATED FUNCTIONS END HERE
